{
  "hash": "bdeeedcf97e09496ff89a7bf27725935",
  "result": {
    "engine": "jupyter",
    "markdown": "# Definitions and Measurement\n\n## Why definitions matter\nConsistent drawdown metrics allow fair comparison across strategies and time periods. While **Maximum Drawdown (MDD)** is common, it captures only the single worst episode. Complementary measures like **Average Drawdown (AvgDD)**, **Time Under Water (TUW)**, **Ulcer Index (UI)**, and **Recovery Time** help characterize the *shape* and *persistence* of losses.\n\n## Key metrics & formulas\n\n### Maximum Drawdown (MDD)\nDefinition: largest peak-to-trough loss.\n\n$$\n\\mathrm{MDD} = \\min_t\\left(\\frac{P_t}{\\max_{\\tau \\le t} P_\\tau}-1\\right)\n$$\n\n### Average Drawdown (AvgDD)\nDefinition: mean depth across all drawdowns.\n\n$$\n\\mathrm{AvgDD} = \\frac{1}{N_{\\text{dd}}}\\sum_{i=1}^{N_{\\text{dd}}}\\left(\\frac{P_{\\text{trough},i}}{P_{\\text{peak},i}}-1\\right)\n$$\n\n### Time Under Water (TUW)\nDefinition: average duration from a peak to full recovery.\n\n$$\n\\mathrm{TUW} = \\frac{1}{N_{\\text{dd}}}\\sum_{i=1}^{N_{\\text{dd}}}\\left(t_{\\text{rec},i}-t_{\\text{peak},i}\\right)\n$$\n\n### Ulcer Index (UI)\nDefinition: RMS of percentage drawdowns (emphasizes persistent pain).\n\n$$\n\\mathrm{UI} = \\sqrt{\\frac{1}{T}\\sum_{t=1}^T \\left(100\\times \\min\\left(0,\\frac{P_t}{\\max_{\\tau\\le t}P_\\tau}-1\\right)\\right)^2}\n$$\n\n### Recovery Time\nDefinition: longest time from a peak to its recovery.\n\n$$\n\\max_i \\left(t_{\\text{rec},i}-t_{\\text{peak},i}\\right)\n$$\n\n## SPY example (downloaded with yfinance)\n\n::: {#165e4572 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd, numpy as np, matplotlib.pyplot as plt\nimport yfinance as yf\nfrom datetime import datetime\n\nspy = yf.download(\"SPY\", start=\"2000-01-01\", auto_adjust=True, progress=False)[\"Close\"].squeeze().asfreq(\"B\").ffill()\nrets = spy.pct_change().dropna()\nwealth = (1+rets).cumprod()\ndd = wealth/wealth.cummax() - 1\n\n# Identify drawdown episodes for AvgDD and TUW\npeaks = wealth.cummax()\nin_dd = dd < 0\n# Episode IDs increment when leaving water and re-entering\nepisode_id = ( (~in_dd).astype(int).diff() == -1 ).cumsum()\nepisode_id = episode_id.where(in_dd, np.nan).ffill()\n\ndraws = []\nif episode_id.notna().any():\n    for eid, grp in wealth.groupby(episode_id.dropna()):\n        # grp spans underwater segment including starting day after a peak\n        depth = (grp/grp.cummax() - 1).min()\n        # Recovery time: from peak to first recovery beyond that peak\n        start_idx = grp.index[0]\n        peak_level = peaks.loc[start_idx]\n        # find recovery\n        after = wealth.loc[start_idx:]\n        rec_idx = after[after >= peak_level].index.min()\n        if pd.isna(rec_idx):\n            rec_days = np.nan\n        else:\n            rec_days = (rec_idx - start_idx).days\n        draws.append((depth, rec_days))\n\navgdd = float(np.nanmean([d for d,_ in draws])) if draws else np.nan\ntuw = float(np.nanmean([u for _,u in draws])) if draws else np.nan\nrecovery_time = float(np.nanmax([u for _,u in draws])) if draws else np.nan\n\nmdd = float(dd.min())\nvol = float(rets.std()*np.sqrt(252))\ncagr = float((wealth.iloc[-1]/wealth.iloc[0])**(252/len(wealth))-1)\nui = float(np.sqrt(( (100*np.minimum(0, dd)).pow(2) ).mean()))\n\ntbl = pd.DataFrame({\n    \"CAGR\":[cagr],\n    \"Vol\":[vol],\n    \"Sharpe\":[cagr/vol if vol else np.nan],\n    \"MDD\":[mdd],\n    \"AvgDD\":[avgdd],\n    \"TUW_days\":[tuw],\n    \"RecoveryTime_days\":[recovery_time],\n    \"UlcerIndex\":[ui]\n})\ndisplay(tbl.round(4))\nimport os\nos.makedirs(\"figures\", exist_ok=True)\ntbl.to_csv(\"figures/spy_drawdown_metrics.csv\", index=False)\nprint(\"Saved to figures/spy_drawdown_metrics.csv\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CAGR</th>\n      <th>Vol</th>\n      <th>Sharpe</th>\n      <th>MDD</th>\n      <th>AvgDD</th>\n      <th>TUW_days</th>\n      <th>RecoveryTime_days</th>\n      <th>UlcerIndex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0772</td>\n      <td>0.1914</td>\n      <td>0.4035</td>\n      <td>-0.5519</td>\n      <td>-0.017</td>\n      <td>31.1618</td>\n      <td>2404.0</td>\n      <td>16.4171</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSaved to figures/spy_drawdown_metrics.csv\n```\n:::\n:::\n\n\n::: {#7e5d1124 .cell execution_count=2}\n``` {.python .cell-code}\n# Quick plots\nplt.figure(); wealth.plot(title=\"SPY Wealth (2000-)\"); plt.tight_layout(); plt.show()\nplt.figure(); dd.plot(title=\"SPY Drawdown (2000-)\"); plt.tight_layout(); plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](01_definitions_files/figure-html/cell-3-output-1.png){width=660 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](01_definitions_files/figure-html/cell-3-output-2.png){width=660 height=470}\n:::\n:::\n\n\n## Practical notes\n- MDD focuses on a single tail event; AvgDD and UI provide stability for optimization.\n- TUW and Recovery Time reflect investor experience and liquidity needs.\n- In stop-loss testing, AvgDD and TUW often show larger improvements than MDD.\n\n",
    "supporting": [
      "01_definitions_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}