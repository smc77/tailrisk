{
  "hash": "4e25c035a160d4a7175281dfad5cb317",
  "result": {
    "engine": "jupyter",
    "markdown": "# Empirical Measurement\n\nWe fetch daily data with **yfinance** and compute: returns, wealth & drawdowns, rolling μ/σ/ρ, and a summary table for SPY, IEF, and BTC.\n\n::: {#8e212ae6 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd, numpy as np, matplotlib.pyplot as plt\nfrom scripts.empirical_data import load_prices_yf, pct_returns, wealth_series, drawdown_series, rolling_stats, summary_metrics\n\ntickers = {\n    \"S&P 500 (SPY adj close)\": \"SPY\",\n    \"US 7-10Y Treasury (IEF)\": \"IEF\",\n    \"Bitcoin (BTC-USD)\": \"BTC-USD\",\n    \"VIX Index (proxy only)\": \"^VIX\"\n}\n\nprices = {}\nfor label, t in tickers.items():\n    try:\n        prices[label] = load_prices_yf(t, start=\"2003-01-01\")\n    except Exception as e:\n        print(f\"Skipping {label}: {e}\")\n\nrets = {k: pct_returns(v) for k, v in prices.items() if v is not None}\nsumm = {k: summary_metrics(r) for k, r in rets.items() if k != \"VIX Index (proxy only)\"}\npd.DataFrame(summ).T\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTicker            SPY\nDate                 \n2003-01-02  59.986362\n2003-01-03  60.170807\n2003-01-06  61.231281\n2003-01-07  61.079792\n2003-01-08  60.197132\nTicker            IEF\nDate                 \n2003-01-02  44.324108\n2003-01-03  44.397266\n2003-01-06  44.287514\n2003-01-07  44.428646\n2003-01-08  44.533195\nTicker         BTC-USD\nDate                  \n2014-09-17  457.334015\n2014-09-18  424.440002\n2014-09-19  394.795990\n2014-09-20  408.903992\n2014-09-21  398.821014\nTicker           ^VIX\nDate                 \n2003-01-02  25.389999\n2003-01-03  24.680000\n2003-01-06  24.910000\n2003-01-07  25.129999\n2003-01-08  25.530001\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CAGR</th>\n      <th>Vol</th>\n      <th>Sharpe</th>\n      <th>MDD</th>\n      <th>AvgDD</th>\n      <th>TUW_days</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>S&amp;P 500 (SPY adj close)</th>\n      <td>0.106012</td>\n      <td>0.184301</td>\n      <td>0.575212</td>\n      <td>-0.551894</td>\n      <td>-0.078635</td>\n      <td>5177.0</td>\n    </tr>\n    <tr>\n      <th>US 7-10Y Treasury (IEF)</th>\n      <td>0.033232</td>\n      <td>0.067210</td>\n      <td>0.494447</td>\n      <td>-0.239248</td>\n      <td>-0.054489</td>\n      <td>5596.0</td>\n    </tr>\n    <tr>\n      <th>Bitcoin (BTC-USD)</th>\n      <td>0.647683</td>\n      <td>0.663650</td>\n      <td>0.975942</td>\n      <td>-0.830363</td>\n      <td>-0.370045</td>\n      <td>2695.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#fb390069 .cell execution_count=2}\n``` {.python .cell-code}\n# Wealth and drawdowns\nfor label in [\"S&P 500 (SPY adj close)\", \"US 7-10Y Treasury (IEF)\", \"Bitcoin (BTC-USD)\"]:\n    if label not in rets: \n        continue\n    r = rets[label]\n    W = wealth_series(r)\n    dd = drawdown_series(r)\n    plt.figure(); W.plot(title=f\"Wealth — {label}\"); plt.tight_layout(); plt.show()\n    plt.figure(); dd.plot(title=f\"Drawdown — {label}\"); plt.tight_layout(); plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](04_empirical_measurement_files/figure-html/cell-3-output-1.png){width=660 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](04_empirical_measurement_files/figure-html/cell-3-output-2.png){width=660 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](04_empirical_measurement_files/figure-html/cell-3-output-3.png){width=660 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](04_empirical_measurement_files/figure-html/cell-3-output-4.png){width=660 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](04_empirical_measurement_files/figure-html/cell-3-output-5.png){width=662 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](04_empirical_measurement_files/figure-html/cell-3-output-6.png){width=662 height=470}\n:::\n:::\n\n\n::: {#c99ae112 .cell execution_count=3}\n``` {.python .cell-code}\n# Rolling stats (S&P 500 example)\nlabel = \"S&P 500 (SPY adj close)\"\nif label in rets:\n    r = rets[label]\n    roll = rolling_stats(r, w_short=20, w_long=126)\n    plt.figure(); roll[\"mu_ann\"].plot(title=\"S&P 500 — Rolling Annualized Mean (126d)\"); plt.tight_layout(); plt.show()\n    plt.figure(); roll[\"vol_ann\"].plot(title=\"S&P 500 — Rolling Annualized Vol (126d)\"); plt.tight_layout(); plt.show()\n    plt.figure(); roll[\"rho1\"].plot(title=\"S&P 500 — Rolling AC(1) (126d)\"); plt.tight_layout(); plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](04_empirical_measurement_files/figure-html/cell-4-output-1.png){width=660 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](04_empirical_measurement_files/figure-html/cell-4-output-2.png){width=660 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](04_empirical_measurement_files/figure-html/cell-4-output-3.png){width=660 height=470}\n:::\n:::\n\n\n::: {#cell-empirical-summary-export .cell execution_count=4}\n``` {.python .cell-code}\nfrom scripts.reporting import compare_strategies, save_table\nrets_named = {k: v for k, v in rets.items() if k in [\"S&P 500 (SPY adj close)\", \"US 7-10Y Treasury (IEF)\", \"Bitcoin (BTC-USD)\"]}\nif len(rets_named) >= 1:\n    table = compare_strategies(rets_named)\n    display(table)\n    out_csv = save_table(table, \"figures/empirical_summary.csv\")\n    print(\"Saved summary CSV to:\", out_csv)\n```\n\n::: {#empirical-summary-export .cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CAGR</th>\n      <th>Vol</th>\n      <th>Sharpe</th>\n      <th>MDD</th>\n      <th>AvgDD</th>\n      <th>TUW_days</th>\n    </tr>\n    <tr>\n      <th>Strategy</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>S&amp;P 500 (SPY adj close)</th>\n      <td>0.106012</td>\n      <td>0.184301</td>\n      <td>0.575212</td>\n      <td>-0.551894</td>\n      <td>-0.078635</td>\n      <td>5177</td>\n    </tr>\n    <tr>\n      <th>US 7-10Y Treasury (IEF)</th>\n      <td>0.033232</td>\n      <td>0.067210</td>\n      <td>0.494447</td>\n      <td>-0.239248</td>\n      <td>-0.054489</td>\n      <td>5596</td>\n    </tr>\n    <tr>\n      <th>Bitcoin (BTC-USD)</th>\n      <td>0.647683</td>\n      <td>0.663650</td>\n      <td>0.975942</td>\n      <td>-0.830363</td>\n      <td>-0.370045</td>\n      <td>2695</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n\nEmpirical summary exported to CSV\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSaved summary CSV to: figures/empirical_summary.csv\n```\n:::\n:::\n\n\n",
    "supporting": [
      "04_empirical_measurement_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}