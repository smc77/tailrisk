{
  "hash": "39c4ba82383bab5deb04933259324c29",
  "result": {
    "engine": "jupyter",
    "markdown": "# Simulation Framework\n\nWe simulate AR(1) processes and evaluate Buy & Hold vs a 5% trailing stop, reporting CAGR, Vol, Sharpe, MDD with 95% confidence intervals (Monte Carlo).\n\n::: {#sim-ar1-rho-ci .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np, pandas as pd, matplotlib.pyplot as plt\nfrom scripts.simulations import simulate_ar1, trailing_stop_returns, metrics\n\nnp.random.seed(1)\nyears = 5\nrho_grid = np.linspace(-0.5, 0.5, 9)\ntrials = 30\nsigma_ann = 0.05\nmu_ann = 0.0\n\ndef run_ci(grid, vary=\"rho\"):\n    rows = []\n    for val in grid:\n        bh, sl = [], []\n        for _ in range(trials):\n            price = simulate_ar1(mu_ann=mu_ann if vary==\"rho\" else val,\n                                 rho=val if vary==\"rho\" else 0.0,\n                                 sigma_ann=sigma_ann, years=years, seed=None)\n            bh_rets = price.pct_change().dropna()\n            sl_rets = trailing_stop_returns(price, stop_pct=0.05).iloc[1:]\n            bh.append(metrics(bh_rets)); sl.append(metrics(sl_rets))\n        for name, coll in [(\"BuyHold\", bh), (\"Stop5pct\", sl)]:\n            dfm = pd.DataFrame(coll)\n            for m in [\"CAGR\",\"Vol\",\"MDD\",\"Sharpe\"]:\n                mu = dfm[m].mean(); se = dfm[m].std(ddof=1)/np.sqrt(len(dfm))\n                rows.append({\"Strategy\":name, \"x\":val, \"Metric\":m,\n                             \"Mean\":mu, \"Low\":mu-1.96*se, \"High\":mu+1.96*se})\n    return pd.DataFrame(rows)\n\ndf = run_ci(rho_grid, vary=\"rho\")\n\nfor m, ylab in [(\"CAGR\",\"CAGR\"),(\"Vol\",\"Annualized Vol\"),(\"MDD\",\"Max Drawdown\"),(\"Sharpe\",\"Sharpe\")]:\n    plt.figure()\n    for strat in [\"BuyHold\",\"Stop5pct\"]:\n        sub = df[(df[\"Metric\"]==m) & (df[\"Strategy\"]==strat)].sort_values(\"x\")\n        plt.plot(sub[\"x\"], sub[\"Mean\"], label=strat)\n        plt.fill_between(sub[\"x\"], sub[\"Low\"], sub[\"High\"], alpha=0.2)\n    plt.xlabel(\"rho\"); plt.ylabel(ylab); plt.title(f\"{ylab} vs rho (μ=0)\")\n    plt.legend(); plt.tight_layout(); plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![AR(1), μ=0: Metrics vs ρ with 95% CI (example run)](03_simulation_framework_files/figure-html/sim-ar1-rho-ci-output-1.png){#sim-ar1-rho-ci-1 width=662 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03_simulation_framework_files/figure-html/sim-ar1-rho-ci-output-2.png){#sim-ar1-rho-ci-2 width=662 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03_simulation_framework_files/figure-html/sim-ar1-rho-ci-output-3.png){#sim-ar1-rho-ci-3 width=662 height=470}\n:::\n\n::: {.cell-output .cell-output-display}\n![](03_simulation_framework_files/figure-html/sim-ar1-rho-ci-output-4.png){#sim-ar1-rho-ci-4 width=662 height=470}\n:::\n:::\n\n\n",
    "supporting": [
      "03_simulation_framework_files"
    ],
    "filters": [],
    "includes": {}
  }
}